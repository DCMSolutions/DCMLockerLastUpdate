@page "/User"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using DCMLocker.Shared
@using DCMLocker.Shared.Locker
@inject DCMLocker.Client.Cliente.TLockerCliente cliente
@inject HttpClient http


@inject Authentication.MOFAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject DCMLocker.Client.Cliente.TLockerCliente Cliente


@if (!string.IsNullOrEmpty(username))
{
    <h3>Mis Boxes</h3>


    @if (Perfil != null)
    {
        @if (!Perfil.Enable)
        {
            <div class="alert alert-danger">
                <strong>Usted no ha verificado su email <a href="/Verificar">Verificar</a></strong>
            </div>
        }

        @if ((Perfil.Boxses != null) && (Perfil.Boxses.Length > 0))
        {
            <div class="alert alert-secondary mt-4" role="alert">
                <span class="oi  @(!Perfil.IsLocked?"oi-lock-unlocked":"oi-lock-locked") mr-2" aria-hidden="true"></span>
                <strong>Usted posee los siguientes Boxes</strong>
                <br />

                <br />
                <br />
                <form>
                    <div class="form-group">
                        <select value=@boxselected @onchange="@(async (args) => await GetConfig(args.Value))" class="form-control form-control-user">
                            @if (Perfil != null)
                            {
                                @for (int x = 0; x < Perfil.Boxses.Length; x++)
                                {
                                    <option value="@Perfil.Boxses[x]">
                                        BOX @(
                                        Perfil.Boxses[x] + 1
                                        )
                                    </option>
                                }
                            }
                        </select>

                    </div>
                    @*<button type="button" disabled="@(IsBussy || Perfil.IsLocked)" class="btn btn-primary btn-user btn-block" @onclick="(() => Accion())">Abrir</button>*@


                    @if (tokens != null)
                    {
                        TokenAccessBox token = tokens.Where(x => x.Box == box).FirstOrDefault();
                        if (token != null)
                        {
                            if (Config != null)
                            {


                                if (Config.State == "Esperando abrir")
                                {

                                    <label>
                                        Token de entrega
                                    </label>
                                    <br />
                                    <label>
                                        <a class="btn btn-success" href="whatsapp://send?text=LOCKER llave para apertura www.dcm.com.ar/QR/index/@token.Token"><span class="oi oi-fork"></span></a>
                                        <a class="btn btn-info" href="mailto:contacto@exemplo.com?subject=LLave para mi Box &body=LOCKER llave para apertura www.dcm.com.ar/QR/index/@@token.Token"><span class="oi oi-envelope-closed"></span></a>
                                    </label>
                                    <input type="text" readonly @bind="@token.Token" class="form-control form-control-user" />
                                }
                                
                                if (Config.State == "Esperando retiro")
                                {

                                    <label>
                                        Token de retiro
                                    </label>
                                    <br />
                                    <label>
                                        <a class="btn btn-success" href="whatsapp://send?text=LOCKER llave para apertura www.dcm.com.ar/QR/index/@token.Token"><span class="oi oi-fork"></span></a>
                                        <a class="btn btn-info" href="mailto:contacto@exemplo.com?subject=LLave para mi Box &body=LOCKER llave para apertura www.dcm.com.ar/QR/index/@@token.Token"><span class="oi oi-envelope-closed"></span></a>
                                    </label>
                                    <input type="text" readonly @bind="@token.Token" class="form-control form-control-user" />
                                }

                            }

                            

                        }
                    }
                    @if (Config != null)
                    {
                        if (Config.State == "Asignado")
                        {
                            <label>
                                Esperando generar token de entrega.
                            </label>
                        }
                        if (Config.State == "Entregado")
                        {
                            <label>
                                Esperando generar token de retiro.
                            </label>
                        }
                    }
                    <br>
                    <center>
                        <button type="button" disabled="@(IsBussy || Perfil.IsLocked)" class="btn btn-warning btn-user col-5" @onclick="(async () => await Accion3())">Generar Token de Entrega</button>
                        <button type="button" disabled="@(IsBussy || Perfil.IsLocked)" class="btn btn-warning btn-user col-5" @onclick="(async () => await Accion2())">Generar Token de Retiro</button>
                    </center>


                </form>
                <br>
                @if (!string.IsNullOrEmpty(ErrorMsn))
                {
                    <div class="alert alert-danger" style="display: table ;margin-left: auto;margin-right: auto;margin-top:auto;margin-bottom:auto;">
                        <h3><strong>@ErrorMsn</strong></h3>
                    </div>
                }


                @if (Perfil.IsLocked)
                {
                    <br />
                    <strong>*** Usted se encuentra bloqueado por el administrador. Por favor comuniquese con el Administrador.</strong>
                }
            </div>




        }
        else
        {
            <div class="alert alert-secondary mt-4" role="alert">
                <span class="oi oi-pencil mr-2" aria-hidden="true"></span>
                <strong>Usted no dispone de ningun Box</strong>
                <span class="text-nowrap">
                    Para solicitar un Box pulse el boton <a href="Addbox" class="btn btn-success"><strong > + </strong></a>
                </span>

            </div>
        }

    }

    <AuthorizeView Roles="User">
        <a class="btn-flotante" disabled="@(IsBussy || Perfil.IsLocked)" title="Bloquear/Desbloquear usuario" style="background-color:green; color:white;" @onclick="ActionAdd"><span class="oi oi-plus"></span></a>
    </AuthorizeView>
}
else
{
    <div class="abs-center">
        <div class="spinner-grow text-secondary"></div>
        <div class="spinner-grow text-secondary"></div>
        <div class="spinner-grow text-secondary"></div>
    </div>
}

@code {
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string username = "";
    private bool IsAdmin = false;
    private bool IsUser = false;
    private bool IsBussy = false;
    private LockerUserPerfil Perfil = null;
    private int box;
    private string tokenkey = "";
    string ErrorMsn;
    TokenAccessBox[] tokens { get; set; }
    int boxselected;


    protected async override void OnInitialized()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        username = user.Identity.Name;
        IsAdmin = user.IsInRole("Admin");
        IsUser = user.IsInRole("User");

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage =
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";


        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }

        Perfil = await Cliente.GetMyBox();
        if (Perfil.Boxses.Length > 0) box = Perfil.Boxses[0];
        if (user.Identity.Name != "Admin") tokens = await Cliente.GetMyTokenKey();
        GetConfig(boxselected);
        StateHasChanged();

        base.OnInitialized();
    }
    public async Task GetConfig(object a)
    {
        Console.WriteLine($"entra y el object es {a}");
        box = Convert.ToInt16(a);
        Config = await cliente.GetBoxConfig(box);
        Perfil = await Cliente.GetMyBox();
        StateHasChanged();
    }
    protected async void Accion()
    {
        IsBussy = true;
        try
        {
            Console.WriteLine($"BOX {box}");
            await Cliente.OpenLocker(((box & 0x00f0) >> 4), (box & 0x000f), username, "123456");
            Perfil = await Cliente.GetMyBox();
            if (Perfil.Boxses.Length > 0) box = Perfil.Boxses[0];
        }
        finally
        {
            IsBussy = false;
        }
        StateHasChanged();
    }
    protected async Task Accion2()
    {
        ErrorMsn = "";
        StateHasChanged();
        Config = await cliente.GetBoxConfig(box);
        if (Config.State == "Libre")
        {
            OnInitialized();
        }
        if (Config.State == "Entregado")
        {
            Config.State = "Esperando retiro";
            bool r = await cliente.SetBoxConfig(Config);
            try
            {
                tokenkey = await Cliente.GenerateTokenKey(box);
            }
            finally
            {
                IsBussy = false;
            }
            tokens = await Cliente.GetMyTokenKey();
            StateHasChanged();
        }
        else if (Config.State == "Esperando retiro")
        {

            ErrorMsn = "Ya se ha generado un token de retiro";
            StateHasChanged();

        }
        else
        {
            ErrorMsn = "No se ha realizado ninguna entrega";
            StateHasChanged();
        }
    }
    /*********************/
    TLockerMap Config;

    protected async Task Accion3()
    {
        ErrorMsn = "";
        StateHasChanged();
        Config = await cliente.GetBoxConfig(box);
        if (Config.State == "Libre")
        {
            OnInitialized();
        }
        if (Config.State == "Asignado")
        {
            Config.State = "Esperando abrir";
            bool r = await cliente.SetBoxConfig(Config);

            IsBussy = true;
            try
            {
                tokenkey = await Cliente.GenerateTokenKey(box);
            }
            finally
            {
                IsBussy = false;
            }
            tokens = await Cliente.GetMyTokenKey();
            StateHasChanged();
        }
        else
        {
            ErrorMsn = "Ya se generó un token de entrega";
            StateHasChanged();
        }
    }
    /************************/
    private void ActionAdd()
    {
        Navigation.NavigateTo("/Addbox");
    }
}
