@page "/Red"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using DCMLocker.Shared
@using DCMLocker.Shared.Locker



@inject Authentication.MOFAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject DCMLocker.Client.Cliente.TLockerCliente Cliente
<h3>Red</h3>
@if (Ips != null)
{
<div class="row">
    @for (int x = 0; x < Ips.Length; x++)
    {
        <div class="col-lg-6">
            <p><strong>IP:</strong>@Ips[x].IP</p>
            <p><strong>MASK:</strong>@Ips[x].NetMask</p>
            <p><strong>Tipo:</strong>@Ips[x].NetworkInterfaceType</p>
            <p><strong>Estado:</strong>@Ips[x].NetworkOperationalStatus</p>
        </div>
    }
</div>
}
<button type="button" class="btn btn-primary btn-user btn-block" @onclick="SetWlan">Activar WLan</button>
<button type="button" class="btn btn-secondary btn-user btn-block" @onclick="DownWlan">Desactivar WLan</button>
<button type="button" class="btn btn-warning btn-user btn-block" @onclick="ModificarWifi">Conectar a una red</button>

@if (SSID != null)
{

    <div class="alert alert-danger">
        @for(int x=0;x<SSID.Length;x++)
        {
            <strong>@SSID[x]</strong>
        }
    </div>
}
@if(isconectar)
{
<form class="user">

    <div class="form-group">
        <label><strong>SSID</strong></label>
        <p>Identificador de la red WIFI.</p>
        <input type="text" @bind="wifi_SSID" class="form-control form-control-user" />
    </div>
    <div class="form-group">
        <label><strong>Password</strong></label>
        <p>Clave de acceso de la red WIFI.</p>
        <input type="password" @bind="wifi_Pass" class="form-control form-control-user" />
    </div>
    <button type="button" class="btn btn-primary btn-user btn-block" @onclick="Save">Modificar</button>

</form>
}
@if (!string.IsNullOrEmpty(ErrorMsn))
    {
<div class="alert alert-danger">
    <strong>@ErrorMsn</strong>
</div>
    }


@code
 {
    SystemNetwork[] Ips { get; set; }
    string[] SSID { get; set; }
    string wifi_SSID { get; set; }
    string wifi_Pass { get; set; }
    string ErrorMsn { get; set; }
    bool isconectar {get;set;}
    protected override async void OnInitialized()
    {
        isconectar=false;
        base.OnInitialized();
        Ips = await Cliente.System_GetIP();
        SSID = await Cliente.System_GetSSID();
        StateHasChanged();
    }
    protected async void Save()
    {
        bool r = await Cliente.System_SetSSID(wifi_SSID, wifi_Pass);
        if (!r) ErrorMsn = "No se pudo configurar la red";
        else{
           isconectar=false;
           Ips = await Cliente.System_GetIP();
           SSID = await Cliente.System_GetSSID();
        }
        StateHasChanged();
        
    }

    protected async void SetWlan()
    {
        bool r = await Cliente.System_SetWLan(true);
        if (!r) ErrorMsn = "No se pudo activar la interface wlan0";
        else
        {
            Ips = await Cliente.System_GetIP();
            SSID = await Cliente.System_GetSSID();
        }
        StateHasChanged();
    }
    protected async void DownWlan()
    {
        bool r = await Cliente.System_SetWLan(false);
        if (!r) ErrorMsn = "No se pudo desactivar la interface wlan0";
        else{
            Ips = await Cliente.System_GetIP();
            SSID = await Cliente.System_GetSSID();
        }
        StateHasChanged();
    }

    protected void ModificarWifi()
    {
        isconectar=true;
    }

}
