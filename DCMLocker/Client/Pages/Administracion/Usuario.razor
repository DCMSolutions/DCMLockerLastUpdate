@page "/Usuario/{id}"
@using DCMLocker.Shared
@using DCMLocker.Shared.Locker
@inject DCMLocker.Client.Cliente.TLockerCliente cliente
@inject NavigationManager nav
<h3>Usuario</h3>
<p>@realid</p>

@if (!string.IsNullOrEmpty(ErrorMsn))
{
    <div class="alert alert-danger">
        <strong>@ErrorMsn</strong>
    </div>
}
@if (perfil != null)
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi @(!perfil.IsLocked?"oi-lock-unlocked":"oi-lock-locked") mr-2" aria-hidden="true"></span>
        <strong>El usuario @realid esta @(perfil.Enable?"habilitado":"no habilitado") para la utilización del locker.</strong>
        <br />
        <span>
            Las cajas que tiene asignada son las siguientes:
        </span>
        <br />
        <ul>
            @for (int x = 0; x < perfil.Boxses.Length; x++)
            {
                <li>@(perfil.Boxses[x] +1)</li>
            }
        </ul>

  

    </div>
    <br/>
    <br/>
    <br/>
    <button type="button" class="btn-flotante" disabled="@IsBusy" title="Bloquear/Desbloquear usuario" style="color:white;" @onclick="(() => Accion3())"><span class="oi @(perfil.IsLocked?"oi-lock-unlocked":"oi-lock-locked")"></span></button>

}

<form>
    <div class="form-group">
        <label><strong>Asignación o remoción de cajas</strong></label>
        <select @bind="box" class="form-control form-control-user">
            @if (Boxes != null)
            {
                @for (int x = 0; x < Boxes.Length; x++)
                {
                    <option value="@Boxes[x].Box">@((Boxes[x].Box +1).ToString() + " " + (Boxes[x].IsAssigned ? "Ocupado" : "Libre"))</option>
                }
            }
        </select>

    </div>
    <button type="button" disabled="@IsBusy" class="btn btn-primary btn-user btn-block" @onclick="(() => Accion())">Asignar</button>
    <button type="button" disabled="@IsBusy" class="btn btn-warning btn-user btn-block" @onclick="(() => Accion2())">Remover</button>

</form>

@code {
    [Parameter]
    public string id { get; set; }
    private string realid { get; set; }
    private int box { get; set; }
    private bool IsBusy { get; set; }
    private string ErrorMsn { get; set; }
    private string Msn { get; set; }
    private LockerUserPerfil perfil { get; set; }
    private BoxState[] Boxes { get; set; }

    private async Task ActualizarInfo()
    {
        Console.WriteLine("Datos actualizando..");
        perfil = await cliente.GetBoxFromUser(realid);
        Boxes = await cliente.GetBoxesFixedState();
        Console.WriteLine("Datos actualizados");
    }

    protected async override Task OnInitializedAsync()
    {
        realid = id.Replace("%_", ".");
        await ActualizarInfo();

    }

    async void Accion()
    {

        IsBusy = true;
        try
        {
            Msn = "";
            ErrorMsn = "";
            bool r = await cliente.SetUserToBox(realid, box);
            if (r)
            {
                //actualizar
                Msn = $"El Box {box} fue asignado al usuario.";
                await ActualizarInfo();

            }
            else
            {
                ErrorMsn = "El Box no pudo ser asignado al usuario.";
            }
        }
        finally
        {
            IsBusy = false;
            StateHasChanged();
        }
    }
    async void Accion2()
    {
        IsBusy = true;
        try
        {
            ErrorMsn = "";
            bool r = await cliente.SetUserRemoveBox(realid, box);
            if (r)
            {
                //actualizar
                Msn = $"El Box {box} fue removido al usuario.";
                await ActualizarInfo();
            }
            else
            {
                ErrorMsn = "El Box no pudo ser removido para el usuario.";
            }
        }
        finally
        {
            IsBusy = false;
            StateHasChanged();
        }
    }
    async void Accion3()
    {
        IsBusy = true;
        try
        {
            ErrorMsn = "";
            bool r = await cliente.SetLockUser(realid);
            if (r)
            {
                //actualizar
                perfil = await cliente.GetBoxFromUser(realid);
            }
            else
            {
                ErrorMsn = "No se pudo cambiar el estado de bloqueo del usuario.";
            }
        }
        finally
        {
            IsBusy = false;
            StateHasChanged();
        }
    }
}
